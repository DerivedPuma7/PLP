1- Discurse sobre os pilares da Orientação a Objetos: Abstração, Encapsulamento, Herança e Polimorfismo.
R: 
.Abstração: capacidade/habilidade de representar objetos e estruturas do mundo real, abstraídos por meio de suas características e comportamentos.
.Encapsulamento: é a característica da POO que permite a proteção aos dados, restringindo acesso a atributos e métodos.
.Herança: heraça dita o aproveitamento de atributos/métodos  de classes semelhantes. Aqui é introduzido o conceito de classe pai e classe filha. Classe filha é aquela que herda os attr/métodos da classe pai. Possibilita reaproveitamento de código e facilita manutenção. Mas é importante ter cuidado ao usar herança, pois pode se tornar um problema lidar com o comportamento das classes.
.Polimorfismo: é a habilidade das classes filhas sobrescreverem o comportamento da classe pai. A ideia principal é que a classe pai seja mais generalista, e a classe filha mais especializada.

2- Utilizando a linguagem de programação orientada a objetos de sua preferência, crie uma classe para modelar um livro. Quais atributos e métodos são importantes para um sistema que tem um livro como objeto? Defina os métodos construtor e destrutor da classe.
R:

<?php
class Livro {
    private $titulo;
    private $autor;
    private $publicacao;
    private $paginaAtual;

    public __constructor(string $titulo, string $autor, Date $publicacao) {
        $this->titulo = $titulo;
        $this->autor = $autor;
        $this->publicacao = $publicacao;
    }
    
    public setPagina($pagina): void {
        $this->paginaAtual = $pagina;
    }

    public getPaginaAtual(): int {
        return $this->paginaAtual;
    }
}

3- Utilizando a linguagem de programação orientada a objetos de sua preferência,
crie uma classe para representar datas usando três atributos: o dia, o mês, e o ano.
Sua classe deve ter um construtor que inicializa os três atributos e verifica a
validade dos valores fornecidos. Inclua também a possibilidade de construir o
objeto sem parâmetros que inicializa a data com a data atual fornecida pelo
sistema operacional. Forneça uma operação para avançar uma data para o dia
seguinte

<?php

class Date {
    const THIRD_DAY_MONTHS = ['01', '03', '05', '07', '08', '10', '12'];

	private $day;
	private $month;
  	private $year;

    public function __construct(string $day = null, string $month = null, string $year = null) {
        $day = $day ?? date('d');
        $month = $month ?? date('m');
        $year = $year ?? date('Y');

        if(intval($day) > 31) throw new Exception('Dia inválido');
        if(intval($month) > 12) throw new Exception('Mês inválido');

        $this->day = $day;
        $this->month = $month;
        $this->year = $year;	
    }

    public function getNextDay() {
        if(
            $this->month == '02' && 
            intval($this->day) == 28
        ) {
            return '01';
        }

        if(
            in_array($this->month, self::THIRD_DAY_MONTHS) && 
            intval($this->day) == 31
        ) {
            return '01';
        }

        if(
            !in_array($this->month, self::THIRD_DAY_MONTHS) && 
            intval($this->day) == 30
        ) {
            return '01';
        }

        return intval($this->day) + 1;
    }

    public function getDate() {
        return "$this->day/$this->month/$this->year";
    }
}
?>


4-
<?php

class Sessao {
	public $contador;
  
	public function __construct() {
    	$this->contador = 0;
    }
  
  	public function getContador() {
    	return $this->contador;
    }
  	
  	public function addContador() {
      $this->contador++;
    }
}

class Usuario {
	public $nome;
  	public $filmeAtual;
  	
  	public function __construct($nome, $filme, $sessao) {
    	$this->nome = $nome;
      	$this->filmeAtual = $filme;
      	$sessao->addContador();
    }
}

$sessao = new Sessao();
$usuario1 = new Usuario('gabes', 'avatar', $sessao);
$usuario2 = new Usuario('figs', 'senhor dos aneis', $sessao);

echo $sessao->getContador();

?>