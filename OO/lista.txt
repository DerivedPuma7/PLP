1- Discurse sobre os pilares da Orientação a Objetos: Abstração, Encapsulamento, Herança e Polimorfismo.
R: 
.Abstração: capacidade/habilidade de representar objetos e estruturas do mundo real, abstraídos por meio de suas características e comportamentos.
.Encapsulamento: é a característica da POO que permite a proteção aos dados, restringindo acesso a atributos e métodos.
.Herança: heraça dita o aproveitamento de atributos/métodos  de classes semelhantes. Aqui é introduzido o conceito de classe pai e classe filha. Classe filha é aquela que herda os attr/métodos da classe pai. Possibilita reaproveitamento de código e facilita manutenção. Mas é importante ter cuidado ao usar herança, pois pode se tornar um problema lidar com o comportamento das classes.
.Polimorfismo: é a habilidade das classes filhas sobrescreverem o comportamento da classe pai. A ideia principal é que a classe pai seja mais generalista, e a classe filha mais especializada.

2- Utilizando a linguagem de programação orientada a objetos de sua preferência, crie uma classe para modelar um livro. Quais atributos e métodos são importantes para um sistema que tem um livro como objeto? Defina os métodos construtor e destrutor da classe.
R:

<?php
class Livro {
    private $titulo;
    private $autor;
    private $publicacao;
    private $paginaAtual;

    public __constructor(string $titulo, string $autor, Date $publicacao) {
        $this->titulo = $titulo;
        $this->autor = $autor;
        $this->publicacao = $publicacao;
    }
    
    public setPagina($pagina): void {
        $this->paginaAtual = $pagina;
    }

    public getPaginaAtual(): int {
        return $this->paginaAtual;
    }
}

3- Utilizando a linguagem de programação orientada a objetos de sua preferência,
crie uma classe para representar datas usando três atributos: o dia, o mês, e o ano.
Sua classe deve ter um construtor que inicializa os três atributos e verifica a
validade dos valores fornecidos. Inclua também a possibilidade de construir o
objeto sem parâmetros que inicializa a data com a data atual fornecida pelo
sistema operacional. Forneça uma operação para avançar uma data para o dia
seguinte

<?php

class Date {
    const THIRD_DAY_MONTHS = ['01', '03', '05', '07', '08', '10', '12'];

	private $day;
	private $month;
  	private $year;

    public function __construct(string $day = null, string $month = null, string $year = null) {
        $day = $day ?? date('d');
        $month = $month ?? date('m');
        $year = $year ?? date('Y');

        if(intval($day) > 31) throw new Exception('Dia inválido');
        if(intval($month) > 12) throw new Exception('Mês inválido');

        $this->day = $day;
        $this->month = $month;
        $this->year = $year;	
    }

    public function getNextDay() {
        if(
            $this->month == '02' && 
            intval($this->day) == 28
        ) {
            return '01';
        }

        if(
            in_array($this->month, self::THIRD_DAY_MONTHS) && 
            intval($this->day) == 31
        ) {
            return '01';
        }

        if(
            !in_array($this->month, self::THIRD_DAY_MONTHS) && 
            intval($this->day) == 30
        ) {
            return '01';
        }

        return intval($this->day) + 1;
    }

    public function getDate() {
        return "$this->day/$this->month/$this->year";
    }
}
?>

4- Quais os níveis de visibilidade utilizados no encapsulamento de atributos e métodos? Quais as características de cada um deles ?
R:
Private, protected e public.
Private: permite acesso apenas dentro da classe, não é possível acessar métodos ou atributos por fora da classe.
Protected: permite acesso para atributos e métodos apenas dentro da classe ou para classe extendidas (derivadas).
Public: acesso aberto a atributos e métodos.

5-
<?php

class Sessao {
	public $contador;
  
	public function __construct() {
    	$this->contador = 0;
    }
  
  	public function getContador() {
    	return $this->contador;
    }
  	
  	public function addContador() {
      $this->contador++;
    }
}

class Usuario {
	public $nome;
  	public $filmeAtual;
  	
  	public function __construct($nome, $filme, $sessao) {
    	$this->nome = $nome;
      	$this->filmeAtual = $filme;
      	$sessao->addContador();
    }
}

$sessao = new Sessao();
$usuario1 = new Usuario('gabes', 'avatar', $sessao);
$usuario2 = new Usuario('figs', 'senhor dos aneis', $sessao);

echo $sessao->getContador();

?>

6- O que é uma classe abstrata? Para que serve? Como implementar uma classe abstrata? Como forçar a implementação de métodos abstratos, nas classes que herdam a classe abstrata? Crie uma classe chamada Obra_de_arte, que seja abstrata e tenha o método abstrato definir_autor. Essa classe abstrata deve ser herdada pela classe criada no exercício 2.
R:
Uma classe abstrata é aquela que não pode ser instanciada. Não é possível realizar a instrução $classe = new ClasseAbstrata();
Ela serve como um modelo para as classes derivadas, que por sua vez, deverão sobrescrever os métodos para realizar a implementação destes.
É possível realizar uma implementação específica para cada método da classe que extender da classe abstrata. Dessa forma, cada uma terá uma implementação diferente, como for desejado.
<?php


abstract class ObraDeArte {
  	private $autor;
  
	public function definirAutor($autor) {
     	$this->autor = $autor;
    }
}

class Livro extends ObraDeArte {
    public $titulo;
    public $autor;
    public $publicacao;
    public $paginaAtual;

    public function __constructor(string $titulo, string $autor) {
        $this->titulo = $titulo;
        $this->autor = $autor;
    }
  
  	public function definirAutor($autor) {
     	$this->autor = $autor;
    }
    
    public function setPagina($pagina): void {
        $this->paginaAtual = $pagina;
    }

    public function getPaginaAtual(): int {
        return $this->paginaAtual;
    }
}

$livro = new Livro('titulo', 'autor');
$livro->definirAutor('autor 2');
echo $livro->autor;

?>

7-

8- Qual problema pode ocorrer em um cenário de Herança múltipla? Como as linguagens de programação lidam com ele?
R:
Pode ocorrer problemas de ambiguidade, quando as classe que são herdadas possuem atributos semelhantes, com nomes parecidos, ou até mesmo o mesmo atributo. Isso ocasiona dificuldade
de manutenção quando não for tratado.
Algumas linguagens de programação não permitem a herança múltipla (particularmente não gosto dessa prática, julgo como uma má prática)

9- Para que servem os padrões de projeto de software, no cenário de Orientação a Objetos?
Os padrões de projetos são soluções práticas e bastante difundidas no cenário de desenvolvimento de software, que se propõem a solucionar problemas corriqueiros durante a prática
da Orientação a Objetos. Alguns exemplos são: Singleton, Observer, Adapter, Bridge, entre outros.

11- Como representar a agregação de classes?
Agregação é a associação em que uma classe contém objetos de outra classe.
Na UML, agregação é representado como um losango vazado e uma linha sólida.

13- Diferencie Associação, Agregação e Composição de objetos.
.Associação: é a relação entre classes em que uma não depende da outra para existir. Algo no sentido de "usar um";
.Agregação: é a relação entre classes em que uma classe pode conter objetos de outra classe, mas esses objetos podem existir independentemente da classe que os contém. 
Algo no sentido de "ter um" ou "ser parte de";
.Composição: é a relação entre classes em que uma classe é composta por objetos de outra classe, e esses objetos só existem enquanto a classe que os contém existir.
Algo no sentido de  "ser um" ou "todo/parte";

14.O que são acoplamento e coesão na Orientação a objetos?
.Acoplamento se refere a quanto uma classe depende de outra. Basicamente, quanto maior o acoplamento, maior a dificuldade de manutenção e evolução do código, por que vários
componentes são interligados entre si;
.Coesão se refere ao grau de relação entre os elementos internos de uma classe. Nesse caso, quanto mais coeso for uma classe, melhor é, pois significa que os métodos,
atributos, relações são bem distintos e possuem responsabilidades únicas;

